<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright 2013 The Android Open Source Project

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.android.actionbarcompat.styled"
    android:versionCode="1"
    android:versionName="1.0" >

    <!-- Min/target SDK versions (<uses-sdk>) managed by build.gradle -->

    <!--
        Theme is set on the application so that our custom theme is used by
        default by all Activities
    -->
    <application
        android:icon="@drawable/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/Theme.Styled" >

        <activity android:name="com.example.android.actionbarcompat.HackPrinceton.MainActivity">

            <!-- Launcher Intent filter -->
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

            <!--
                In this example set the Activity to have a split action bar when the device's
                display is narrow. In ActionBarCompat this is done by setting the
                'android.support.UI_OPTIONS' metadata field to 'splitActionBarWhenNarrow'.
            -->
            <meta-data
                android:name="android.support.UI_OPTIONS"
                android:value="splitActionBarWhenNarrow" />

        </activity>

        <!-- The first meta-data tag embeds the version of the Play Services library that the app
        was compiled with into the app. The second holds our API key that we previously generated. Added by Gela M-->

        <meta-data
            android:name="com.google.android.maps.v2.API_KEY"
            android:value="AIzaSyBaBudPLnHUQ0Tn6v1kwZU5tUYlCbGz7Co" />

        <!-- Setting Permissions app would need. Added by Gela-->
        <uses-permission android:name="android.permission.INTERNET" />
        <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
        <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
        <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES" />
        <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
        <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

    </application>

</manifest>
